        def minus(s):
            record, base = {}, 0
            for x in s:
                if x not in record: record[x] = 1
                else: record[x] += 1
            x = 0
            while x < len(s):
                k = x
                while k+1 < len(s) and s[k] == s[k+1]:
                    k += 1
                if record[s[x]] == (k - x + 1):base += record[s[x]]**2; del record[s[x]]; s = s[0:x] + s[k+1:]; x = k
                else: x += 1
            return s,base
            
        def nexts(s):
            if not s: return 0
            h = tuple(s)
            if h in self.cache: return self.cache[h]
            s, base = minus(s)
            ans, groups, x = 0, [], 0
            while x < len(s):
                if s[x] == s[0]:
                    k = x
                    while k+1 < len(s) and s[k+1] == s[0]:
                        k += 1
                    groups.append((x,k))
                    x = k + 1
                else: x += 1
            for size in range(1,len(groups)+1):
                for unit in itertools.combinations(groups, size):
                    temp = sum([i[-1]- i[0] + 1 for i in unit]) ** 2
                    temp += sum([nexts(s[unit[i][-1]+1:unit[i+1][0]]) for i in range(len(unit)-1)]+[nexts(s[unit[-1][-1]+1:])])
                    ans = max(ans,temp)
            self.cache[h] = ans + base
            return ans + base
        self.cache = {}
        return nexts(boxes)